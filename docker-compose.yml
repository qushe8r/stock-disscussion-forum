services:
  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    networks:
      - stock_discussion_forum
    ports:
      - "2181:2181"
    environment:
#      ALLOW_ANONYMOUS_LOGIN: yes
#      ZOO_TLS_CLIENT_AUTH: none
#      ZOO_TLS_QUORUM_CLIENT_AUTH: none
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka1:
    image: "confluentinc/cp-kafka:latest"
    networks:
      - stock_discussion_forum
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  kafka2:
    image: "confluentinc/cp-kafka:latest"
    networks:
      - stock_discussion_forum
    depends_on:
      - zookeeper
    ports:
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://localhost:19093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  kafka3:
    image: "confluentinc/cp-kafka:latest"
    networks:
      - stock_discussion_forum
    depends_on:
      - zookeeper
    ports:
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://localhost:19094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - stock_discussion_forum
    ports:
      - "8989:8080"
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  mysql:
    image: mysql:8.0
    networks:
      - stock_discussion_forum
    volumes:
      - ./db/data:/var/lib/mysql
    #      - ./db/conf.d:/etc/mysql/conf.d
    #      - ./db/initdb.d:/docker-entrypoint-initdb.d
    #    env_file: .env
    ports:
      - "3306:3306"
    environment:
      TZ: Asia/Seoul
      MYSQL_ROOT_PASSWORD: ${RDBMS_ROOT_PASSWORD}
      MYSQL_USER: ${RDBMS_USERNAME}
      MYSQL_PASSWORD: ${RDBMS_PASSWORD}
      MYSQL_DATABASE: stock-discuss
#    healthcheck:
#      test: "/usr/bin/mysql --user=root --password=${RDBMS_ROOT_PASSWORD} --execute \"SHOW DATABASES;\""
#      interval: 2s
#      timeout: 20s
#      retries: 10

  redis:
    image: redis
    networks:
      - stock_discussion_forum
    ports:
      - "6379:6379"

  eureka-server:
    image: stock-discussion-forum-eureka:0.0.1-SNAPSHOT
    networks:
      - stock_discussion_forum
    ports:
      - "8761:8761"

  api-gateway:
    image: stock-discussion-forum-api-gateway:0.0.1-SNAPSHOT
    networks:
      - stock_discussion_forum
    ports:
      - "8000:8000"
    depends_on:
      - eureka-server
    environment:
      SERVER_PORT: 8000
      SPRING_APPLICATION_NAME: gateway-service
      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: user-service
      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: lb://USER-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path=/api/logout/**
      SPRING_CLOUD_GATEWAY_ROUTES[0]_FILTERS[0]: JwtVerificationFilter
      SPRING_CLOUD_GATEWAY_ROUTES[1]_ID: user-service
      SPRING_CLOUD_GATEWAY_ROUTES[1]_URI: lb://USER-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[0]: Method=POST,GET
      SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[1]: Path=/api/sign-up/**,/api/sign-in/**
      SPRING_CLOUD_GATEWAY_ROUTES[2]_ID: user-service
      SPRING_CLOUD_GATEWAY_ROUTES[2]_URI: lb://USER-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[0]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[1]: Path=/api/users/me
      SPRING_CLOUD_GATEWAY_ROUTES[2]_FILTERS[0]: JwtVerificationFilter
      SPRING_CLOUD_GATEWAY_ROUTES[3]_ID: user-service
      SPRING_CLOUD_GATEWAY_ROUTES[3]_URI: lb://USER-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[0]: Method=PATCH,DELETE
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[1]: Path=/api/users/**
      SPRING_CLOUD_GATEWAY_ROUTES[3]_FILTERS[0]: JwtVerificationFilter
      SPRING_CLOUD_GATEWAY_ROUTES[4]_ID: user-service
      SPRING_CLOUD_GATEWAY_ROUTES[4]_URI: lb://USER-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[0]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[1]: Path=/api/users/**
      SPRING_CLOUD_GATEWAY_ROUTES[5]_ID: activity-service
      SPRING_CLOUD_GATEWAY_ROUTES[5]_URI: lb://ACTIVITY-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[0]: Method=POST,PATCH,DELETE
      SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[1]: Path=/api/posts/**
      SPRING_CLOUD_GATEWAY_ROUTES[5]_FILTERS[0]: JwtVerificationFilter
      SPRING_CLOUD_GATEWAY_ROUTES[6]_ID: activity-service
      SPRING_CLOUD_GATEWAY_ROUTES[6]_URI: lb://ACTIVITY-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[0]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[1]: Path=/api/posts/me
      SPRING_CLOUD_GATEWAY_ROUTES[6]_FILTERS[0]: JwtVerificationFilter
      SPRING_CLOUD_GATEWAY_ROUTES[7]_ID: activity-service
      SPRING_CLOUD_GATEWAY_ROUTES[7]_URI: lb://ACTIVITY-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[7]_PREDICATES[0]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[7]_PREDICATES[1]: Path=/api/posts/**
      SPRING_CLOUD_GATEWAY_ROUTES[8]_ID: activity-service
      SPRING_CLOUD_GATEWAY_ROUTES[8]_URI: lb://ACTIVITY-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[8]_PREDICATES[0]: Method=PATCH,DELETE
      SPRING_CLOUD_GATEWAY_ROUTES[8]_PREDICATES[1]: Path=/api/comments/**
      SPRING_CLOUD_GATEWAY_ROUTES[8]_FILTERS[0]: JwtVerificationFilter
      SPRING_CLOUD_GATEWAY_ROUTES[9]_ID: stock-service
      SPRING_CLOUD_GATEWAY_ROUTES[9]_URI: lb://STOCK-SERVICE
      SPRING_CLOUD_GATEWAY_ROUTES[9]_PREDICATES[0]: Method=POST,GET
      SPRING_CLOUD_GATEWAY_ROUTES[9]_PREDICATES[1]: Path=/api/stocks/**
      JWT_SECRET: ${JWT_SECRET}

  user-service:
    image: stock-discussion-forum-user-service:0.0.1-SNAPSHOT
    networks:
      - stock_discussion_forum
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - mysql
      - redis
      - eureka-server
      - api-gateway
    environment:
      APPLICATION_PORT: 8080
      SPRING_APPLICATION_NAME: user-service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/stock-discuss?allowPublicKeyRetrieval=true&useSSL=false&serverTimezon=Asia/Seoul&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: ${RDBMS_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${RDBMS_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      APPLICATION_DOMAIN: api-gateway
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

  activity-service:
    image: stock-discussion-forum-activity-service:0.0.1-SNAPSHOT
    networks:
      - stock_discussion_forum
    ports:
      - "8081:8080"
    restart: always
    depends_on:
      - mysql
      - redis
      - eureka-server
      - api-gateway
    environment:
      APPLICATION_PORT: 8080
      SPRING_APPLICATION_NAME: activity-service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/stock-discuss?allowPublicKeyRetrieval=true&useSSL=false&serverTimezon=Asia/Seoul&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: ${RDBMS_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${RDBMS_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      APPLICATION_DOMAIN: api-gateway

  newsfeed-service:
    image: stock-discussion-forum-newsfeed-service:0.0.1-SNAPSHOT
    networks:
      - stock_discussion_forum
    ports:
      - "8082:8080"
    restart: always
    depends_on:
      - mysql
      - redis
      - eureka-server
      - api-gateway
    environment:
      APPLICATION_PORT: 8080
      SPRING_APPLICATION_NAME: newsfeed-service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/stock-discuss?allowPublicKeyRetrieval=true&useSSL=false&serverTimezon=Asia/Seoul&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: ${RDBMS_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${RDBMS_PASSWORD}

  stock-service:
    image: stock-discussion-forum-stock-service:0.0.1-SNAPSHOT
    networks:
      - stock_discussion_forum
    ports:
      - "8083:8080"
    restart: always
    depends_on:
      - mysql
      - redis
      - eureka-server
      - api-gateway
      - kafka1
    environment:
      APPLICATION_PORT: 8080
      SPRING_APPLICATION_NAME: stock-service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/stock-discuss?allowPublicKeyRetrieval=true&useSSL=false&serverTimezon=Asia/Seoul&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: ${RDBMS_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${RDBMS_PASSWORD}
      KAFKA_BOOTSTRAPSERVERS: "kafka1:9092,kafka2:9093,kafka3:9094"
      REDIS_HOST: redis
      REDIS_PORT: 6379
#      SPRING_KAFKA_BOOTSTRAP_SERVERS[0]: kafka1:9092
#      SPRING_KAFKA_BOOTSTRAP_SERVERS[1]: kafka2:9093
#      SPRING_KAFKA_BOOTSTRAP_SERVERS[2]: kafka3:9094
#      SPRING_CONSUMER_GROUP_ID: stock-service-group
#      SPRING_CONSUMER_AUTO_OFFSET_RESET: earliest
#      SPRING_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
#      SPRING_CONSUMER_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
#      SPRING_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
#      SPRING_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer

networks:
  stock_discussion_forum:
    driver: bridge