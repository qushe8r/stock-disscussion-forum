plugins {
    id 'java'
    id 'com.palantir.docker' version '0.36.0'
}

group = 'log.qushe8r.stock-discussion-forum'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.1")
}

dependencies {
    /** Spring Cloud */
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    /** Spring Web */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    /** Spring Batch */
    // implementation      'org.springframework.boot:spring-boot-starter-batch'

    /** Spring Data */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation      'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    /** QueryDSL */
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    /** Database */
    runtimeOnly 'com.mysql:mysql-connector-j'

    /** Message */
    // implementation      'org.springframework.kafka:spring-kafka'

    /** Test */
    // testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // testImplementation  'org.springframework.batch:spring-batch-test'
    // testImplementation  'org.springframework.kafka:spring-kafka-test'

    /** Test Container */
    // testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    // testImplementation 'org.testcontainers:junit-jupiter'
    // testImplementation 'org.testcontainers:mysql'
    // testImplementation  'org.testcontainers:mongodb'
    // testImplementation  'org.testcontainers:kafka'

    /** Utils */
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // implementation      'org.springframework.boot:spring-boot-starter-actuator'

    implementation project(':common')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println(tasks.bootJar.outputs.files)
    name rootProject.name + '-' + project.name + ":" + version
    dockerfile file('../Dockerfile')
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}